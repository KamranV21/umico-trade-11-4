// @strict-types
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сведения о счете Umico.
// 
// Параметры:
//  НомерСчета - Строка - номер счета карты лояльности
// 
// Возвращаемое значение:
//  см. UMC_ОбменСUmico.НоваяСтруктураСведенияОСчете.
Функция ПолучитьСведенияОСчете(НомерСчета) Экспорт

	Ресурс = "/customers/" + НомерСчета + "/balances";
	СтруктураОтвета = ВыполнитьHTTPЗапрос("balance", "GET", Ресурс);
	Возврат ОбработатьОтветПоСведениямОСчете(СтруктураОтвета);

КонецФункции

// Регистрирует данных о чеке в Umico.
// 
// Параметры:
//  Документ - ДокументСсылка.ЧекККМ,ДокументСсылка.ЧекККМВозврат,ДокументСсылка.РеализацияТоваровУслуг,ДокументСсылка.ВозвратТоваровОтКлиента
// 
// Возвращаемое значение:
//  Структура - Зарегистрировать чек:
// * Результат - Булево -
Функция ЗарегистрироватьЧек(Документ) Экспорт

	ЭтоПродажа = ТипЗнч(Документ) = Тип("ДокументСсылка.ЧекККМ") Или ТипЗнч(Документ) = Тип(
		"ДокументСсылка.РеализацияТоваровУслуг");

	ИдентификаторЧекаПродажи = Неопределено;

	Если Не ЭтоПродажа Тогда
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЧекККМВозврат") Тогда
			ЧекККМ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Документ, "ЧекККМ");
			Выборка = ПолучитьВыборкуИдентификатораЧекаUmico(ЧекККМ);
			Если Выборка.Следующий() Тогда
				ИдентификаторЧекаПродажи = Выборка.Идентификатор;
			КонецЕсли;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ИдентификаторЧекаПродажи) Тогда
			// Чек продажи не был зарегистрирован в Umico, поэтому сведения о возврате также передавать не нужно.
			Возврат Новый Структура("Результат", Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Если есть сведения о чеке, то перед повторной отправкой удалим предыдущие сведения.
	//УдалитьСведенияОЧеке(Документ);
	
	// 1. В Umico отправляются данные чека для предварительной регистрации.
	Если ЭтоПродажа Тогда
		Ответ = ЗарегистрироватьЧекВUmico(Документ);
	Иначе
		//Ответ = ЗарегистрироватьЧекВозвратаВUmico(Документ, ИдентификаторЧекаПродажи);
	КонецЕсли;
	
	// 2. Если шаг 1 пройден успешно, то будет отправлен запрос на подтверждение (оплату чека) в Umico.
//	Если Ответ <> Неопределено И Ответ.Результат Тогда                                                         
//		Идентификатор = Ответ.Идентификатор;
//		Если ЭтоПродажа Тогда
//			Ответ = ЗарегистрироватьЧекВUmico(Документ, Идентификатор);
//		Иначе
//			//Ответ = ЗарегистрироватьЧекВозвратаВUmico(Документ, ИдентификаторЧекаПродажи, Идентификатор);
//		КонецЕсли;
//	Иначе
//		Возврат Ответ;
//	КонецЕсли;
	
	// 3. Шаг 2 не возвращает ответа. Для проверки статуса чека нужно выполнить отдельный запрос.
//	КоличествоПопыток = 3;
//	ИнтервалПопытки = 5; // в секундах
//	Пока КоличествоПопыток > 0 Цикл
//		
//		Ответ = ПроверитьСтатусЧекаUmico(Документ, Идентификатор);
//		Если Ответ <> Неопределено И НЕ Ответ.Продолжить Тогда                                                         
//			Возврат Ответ;
//		КонецЕсли;
//		
//		// Ожидание.
//		СтрокаЗапроса = "ping -n 1 -w " + Формат(1000 * ИнтервалПопытки, "ЧДЦ=0; ЧГ=") + " 127.255.255.255"; 
//		WshShell = Новый COMОбъект("WScript.Shell"); 
//		WshShell.Run(СтрокаЗапроса, 0, -1);
//		
//		КоличествоПопыток = КоличествоПопыток - 1;
//		
//	КонецЦикла;

	Возврат Новый Структура("Результат", Ложь);

КонецФункции

// Выполняет заполнение реквизитов, необходимых для подлкючения к Umico.
Процедура ОпределитьПараметрыПодключения() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	ПараметрыПодключения.APIKey,
						  |	ПараметрыПодключения.POSID
						  |ИЗ
						  |	Справочник.UMC_ПараметрыПодключенияКUmcio КАК ПараметрыПодключения
						  |ГДЕ
						  |	ВЫБОР
						  |		КОГДА &ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.UMC_ВариантыИспользованияПодключенияКUmico.ДляОптовыхПродаж)
						  |			ТОГДА ПараметрыПодключения.Пользователь = &Пользователь
						  |		ИНАЧЕ ПараметрыПодключения.КассаККМ = &КассаККМ
						  |	КОНЕЦ
						  |	И ПараметрыПодключения.ВариантИспользования = &ВариантИспользования");
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Запрос.УстановитьПараметр("ВариантИспользования", ВариантИспользования);

	Результат = Запрос.Выполнить();

	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаHTTPЗапросов

// Выполняет передачу HTTP-запроса на сервер Umico.
// 
// Параметры:
//  Команда - Строка - Команда
//  Метод - Строка - Метод
//  Ресурс - Строка - Ресурс
//  ТелоЗапроса - Строка - Тело запроса
//  Документ - Неопределено - Документ
// 
// Возвращаемое значение:
// 	см. UMC_ОбменСUmico.НоваяСтруктураОтветHTTPЗапроса.
Функция ВыполнитьHTTPЗапрос(Команда, Метод, Ресурс, ТелоЗапроса = "", Документ = Неопределено)

	СтруктураОтвета = UMC_ОбменСUmico.НоваяСтруктураОтветHTTPЗапроса();

	HTTPСоединение = Новый HTTPСоединение("integration-api.umico.az", , , , , , Новый ЗащищенноеСоединениеOpenSSL);

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("ApiKey", APIKey);
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");

	HTTPЗапрос = Новый HTTPЗапрос("/api/v1" + Ресурс, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);

	Попытка

		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(Метод, HTTPЗапрос);
		ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		СформироватьЗаписьЖурналаЗапросовUmico(Команда, Метод, Ресурс, ТелоЗапроса, Документ, ТелоОтвета);

		Если HTTPОтвет.КодСостояния >= 200 И HTTPОтвет.КодСостояния < 300 Тогда
			СтруктураОтвета.Результат = Истина;
			СтруктураОтвета.ТелоОтвета = ТелоОтвета;
		ИначеЕсли ТелоОтвета = "{""message"":""API rate limit exceeded""}" Тогда
			// Ошибка ожидания.
			СтруктураОтвета.Ожидание = Истина;
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при подключении к Umico. Код статуса: %1'"),
				HTTPОтвет.КодСостояния);
			СтруктураОтвета.ТекстОшибки = ТекстСообщения;
		КонецЕсли;

	Исключение
		СтруктураОтвета.ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;

	Возврат СтруктураОтвета;

КонецФункции

// Формирует запись логов в журнале.
// 
// Параметры:
//  Команда - Строка - Команда
//  Метод - Строка - Метод
//  Ресурс - Строка - Ресурс
//  ТелоЗапроса - Строка - Тело запроса
//  Документ - Неопределено - Документ
//  ТелоОтвета - Неопределено, Строка - Тело ответа
Процедура СформироватьЗаписьЖурналаЗапросовUmico(Команда, Метод, Ресурс, ТелоЗапроса, Документ, ТелоОтвета)

	ТекущийПользователь = Пользователи.ТекущийПользователь();

	ЗаписьЖурнала = Справочники.UMC_ЖурналЗапросовКUmcio.СоздатьЭлемент();
	ЗаписьЖурнала.Дата = ТекущаяДатаСеанса();
	ЗаписьЖурнала.Пользователь = ТекущийПользователь;
	ЗаписьЖурнала.Команда = Команда;
	ЗаписьЖурнала.Метод = Метод;
	ЗаписьЖурнала.Ресурс = Ресурс;
	ЗаписьЖурнала.Запрос = ТелоЗапроса;
	ЗаписьЖурнала.Ответ = ТелоОтвета;
	ЗаписьЖурнала.Документ = Документ;
	ЗаписьЖурнала.Записать();

КонецПроцедуры

// Обработать ответ по сведениям о счете.
// 
// Параметры:
//  СтруктураОтвета - Структура - Структура ответа:
// 	см. UMC_ОбменСUmico.НоваяСтруктураОтветHTTPЗапроса.
// 
// Возвращаемое значение:
//  см. UMC_ОбменСUmico.НоваяСтруктураСведенияОСчете.
Функция ОбработатьОтветПоСведениямОСчете(СтруктураОтвета)

	СведенияОСчете = UMC_ОбменСUmico.НоваяСтруктураСведенияОСчете();

	Если Не СтруктураОтвета.Результат Или Не ЗначениеЗаполнено(СтруктураОтвета.ТелоОтвета) Тогда
		СведенияОСчете.ТекстОшибки = СтруктураОтвета.ТекстОшибки;
		Возврат СведенияОСчете;
	КонецЕсли;

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтруктураОтвета.ТелоОтвета);
	СтруктураJSON = ПрочитатьJSON(ЧтениеJSON); // См. UMC_ОбменСUmico.НоваяСтруктураJSONBalance

	СведенияОСчете.Результат = Истина;
	СведенияОСчете.Сумма = СтруктураJSON.available_points;

	Возврат СведенияОСчете;

КонецФункции

#КонецОбласти

#Область ПодготовкаЗапросаКUmico

// Возвращает идентификатор чека Umico.
// 
// Параметры:
//  Документ - ДокументСсылка.ЧекККМ,ДокументСсылка.ЧекККМВозврат,ДокументСсылка.РеализацияТоваровУслуг,ДокументСсылка.ВозвратТоваровОтКлиента
// 
// Возвращаемое значение:
// ВыборкаИзРезультатаЗапроса:
//  * Идентификатор - Строка
Функция ПолучитьВыборкуИдентификатораЧекаUmico(Документ)

	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	ИдентификаторыЧековUmico.Идентификатор
						  |ИЗ
						  |	РегистрСведений.ИдентификаторыЧековUmico КАК ИдентификаторыЧековUmico
						  |ГДЕ
						  |	ИдентификаторыЧековUmico.Документ = &Документ
						  |	И ИдентификаторыЧековUmico.Идентификатор <> """"");
	Запрос.УстановитьПараметр("Документ", Документ);

	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

// Формирует и отправляет запрос на создание нового чека в Umico или его подтверждение (оплату).
// 
// Параметры:
//  Документ - ДокументСсылка.ЧекККМ, ДокументСсылка.ЧекККМВозврат, ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.ВозвратТоваровОтКлиента - Чек ККМ
//  ИдентификаторЧека - Неопределено,Строка - Идентификатор чека
// 
// Возвращаемое значение:
// 	см. UMC_ОбменСUmico.НоваяСтруктураОтветHTTPЗапроса.
Функция ЗарегистрироватьЧекВUmico(Документ, ИдентификаторЧека = Неопределено)

	ДенежныйФормат = "ЧДЦ=2; ЧРД=.; ЧН=0; ЧГ=";

	РеквизитыДокумента = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Документ,
		"UMC_ОплаченноБалламиUmico,UMC_НомерСчетаUmico,Номер,Дата,СуммаДокумента");

	Выборка = ПолучитьВыборкуПоТоварамДокумента(Документ);

	Товары = Новый Массив; // Массив Из см. UMC_ОбменСUmico.НоваяСтруктураТоварЧекаUmico
	ПорядковыйНомер = 0;

	Пока Выборка.Следующий() Цикл

		СтруктураТовара = UMC_ОбменСUmico.НоваяСтруктураТоварЧекаUmico();

		ВидНоменклатуры = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Выборка.product, "ВидНоменклатуры"); // СправочникСсылка.ВидыНоменклатуры

		ПорядковыйНомер = ПорядковыйНомер + 1;

		ЗаполнитьЗначенияСвойств(СтруктураТовара, Выборка);

		СтруктураТовара.item_number = ПорядковыйНомер;

		СтруктураТовара.price = ФорматЧисловогоЗначения(Выборка.price, ДенежныйФормат);
		СтруктураТовара.amount_before_promo = ФорматЧисловогоЗначения(Выборка.amount_before_promo, ДенежныйФормат);
		СтруктураТовара.amount_after_promo = ФорматЧисловогоЗначения(Выборка.amount_after_promo, ДенежныйФормат);

		Если Не ЗначениеЗаполнено(СтруктураТовара.product_id) Тогда
			СтруктураТовара.product_id = Строка(Выборка.product.УникальныйИдентификатор());
		КонецЕсли;
		СтруктураТовара.product_group_id = Строка(ВидНоменклатуры.УникальныйИдентификатор());

		Товары.Добавить(СтруктураТовара);

	КонецЦикла;

	Структура = Новый Структура;
	Если ЗначениеЗаполнено(ИдентификаторЧека) Тогда
		ОплатаКартой = Ложь;
		Если ТипЗнч(Документ) = Тип("ДокументСсылка.ЧекККМ") Тогда
			ЗапросПоОплате = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ 1
										  |	ОплатаПлатежнымиКартами.НомерСтроки
										  |ИЗ
										  |	Документ.ЧекККМ.ОплатаПлатежнымиКартами КАК ОплатаПлатежнымиКартами
										  |ГДЕ
										  |	ОплатаПлатежнымиКартами.Ссылка = &Документ");
			ЗапросПоОплате.УстановитьПараметр("Документ", Документ);
			Результат = ЗапросПоОплате.Выполнить();
			ОплатаКартой = Не Результат.Пустой();
		КонецЕсли;
		Структура.Вставить("order_ext_id", ИдентификаторЧека);
		Структура.Вставить("order_paid_at", ПолучитьДатуRFC3339(РеквизитыДокумента.Дата));
		Структура.Вставить("payment_type", ?(ОплатаКартой > 0, "cash", "card"));
	КонецЕсли;
	Структура.Вставить("order_number", РеквизитыДокумента.Номер);
	Структура.Вставить("order_created_at", ПолучитьДатуRFC3339(РеквизитыДокумента.Дата));
	Структура.Вставить("order_id", Строка(Документ.УникальныйИдентификатор()));
	Структура.Вставить("pos_ext_id", POSID);
	Структура.Вставить("pos_cashier_id", Строка(Пользователи.ТекущийПользователь()));
	Структура.Вставить("amount_before_promo", ФорматЧисловогоЗначения(РеквизитыДокумента.СуммаДокумента,
		ДенежныйФормат));
	Структура.Вставить("amount_after_promo", ФорматЧисловогоЗначения(РеквизитыДокумента.СуммаДокумента, ДенежныйФормат));
	Структура.Вставить("desc_text", "");
	Структура.Вставить("currency_code", Константы.ВалютаРегламентированногоУчета.Получить().Наименование);
	Структура.Вставить("loy_card_number", СтрЗаменить(СокрЛП(РеквизитыДокумента.UMC_НомерСчетаUmico), " ", ""));
	Структура.Вставить("redeem_points", РеквизитыДокумента.UMC_ОплаченноБалламиUmico > 0);
	Структура.Вставить("redeem_all_points", Ложь);
	Структура.Вставить("max_redeem_points", РеквизитыДокумента.UMC_ОплаченноБалламиUmico);
	Структура.Вставить("items", Товары);

	Выборка.Сбросить();
	СохранитьНомераСтрокЧека(Документ, Выборка);
	JSON = ПолучитьJSONИзЗначения(Структура);

	Команда = ?(ИдентификаторЧека = Неопределено, "checkout", "pay");
	Ресурс = "/" + ПолучитьИмяРесурсаПоВидуОперации(Истина) + "/" + Команда;

	Возврат ВыполнитьHTTPЗапрос(Команда, "POST", Ресурс, JSON, Документ);

КонецФункции

// Получить выборку по товарам документа.
// 
// Параметры:
//  Документ - ДокументСсылка.ЧекККМ, ДокументСсылка.ЧекККМВозврат, ДокументСсылка.РеализацияТоваровУслуг, ДокументСсылка.ВозвратТоваровОтКлиента - Документ
// 
// Возвращаемое значение:
// ВыборкаИзРезультатаЗапроса:
//  * product - СправочникСсылка.Номенклатура
//  * quantity - Число
//  * price - Число
//  * amount_before_promo - Число
//  * amount_after_promo - Число
//  * promo_discount_pct - Число
Функция ПолучитьВыборкуПоТоварамДокумента(Документ)

	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	Товары.Номенклатура КАК product,
						  |	СУММА(Товары.КоличествоУпаковок) КАК quantity,
						  |	ВЫБОР
						  |		КОГДА Товары.КоличествоУпаковок > 0
						  |			ТОГДА ВЫРАЗИТЬ(Товары.Сумма / Товары.КоличествоУпаковок КАК ЧИСЛО(15, 2))
						  |		ИНАЧЕ 0
						  |	КОНЕЦ КАК price,
						  |	СУММА(Товары.Сумма) КАК amount_before_promo,
						  |	СУММА(Товары.Сумма) КАК amount_after_promo,
						  |	0 КАК promo_discount_pct
						  |ИЗ
						  |	Документ.ЧекККМ.Товары КАК Товары
						  |ГДЕ
						  |	Товары.Ссылка = &Документ
						  |СГРУППИРОВАТЬ ПО
						  |	Товары.Номенклатура,
						  |	ВЫБОР
						  |		КОГДА Товары.КоличествоУпаковок > 0
						  |			ТОГДА ВЫРАЗИТЬ(Товары.Сумма / Товары.КоличествоУпаковок КАК ЧИСЛО(15, 2))
						  |		ИНАЧЕ 0
						  |	КОНЕЦ");
	Запрос.УстановитьПараметр("Документ", Документ);

	Возврат Запрос.Выполнить().Выбрать();

КонецФункции

// Функция возвращает имя ресурса строки URL.
// 
// Параметры:
//  ЭтоПродажа - Булево
// 
// Возвращаемое значение:
//  Строка - Получить имя ресурса по виду операции
Функция ПолучитьИмяРесурсаПоВидуОперации(ЭтоПродажа)

	Возврат ?(ЭтоПродажа, "orders", "refunds");

КонецФункции

// Процедура сохраняет данные о строках чека продажи.
// 
// Параметры:
//  Документ - ДокументСсылка.ЧекККМ, ДокументСсылка.РеализацияТоваровУслуг - Документ
//  Выборка - ВыборкаИзРезультатаЗапроса - Выборка:
// * product - СправочникСсылка.Номенклатура -
// * quantity - Число -
// * price - Число -
// * amount_before_promo - Число -
// * amount_after_promo - Число -
// * promo_discount_pct - Число -
Процедура СохранитьНомераСтрокЧека(Документ, Выборка)

	НаборЗаписей = РегистрыСведений.UMC_НомераСтрокЧековUmico.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Документ.Установить(Документ);
	ПорядковыйНомер = 0;
	Пока Выборка.Следующий() Цикл
		ПорядковыйНомер = ПорядковыйНомер + 1;
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Документ = Документ;
		НоваяЗапись.Номенклатура = Выборка.product;
		НоваяЗапись.ПорядковыйНомер = ПорядковыйНомер;
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);

КонецПроцедуры

#КонецОбласти

#Область Прочее

// Функция используется для правильного форматирования числовых значений.
// 
// Параметры:
//  Значение - Число
//  Формат - Строка - Формат
// 
// Возвращаемое значение:
//  Строка - Формат числового значения
Функция ФорматЧисловогоЗначения(Значение, Формат)

	Возврат "###" + Формат(Значение, Формат) + "###";

КонецФункции

// Функция преобразует дату в строку формата RFC 3339.
// 
// Параметры:
//  Дата - Дата
// 
// Возвращаемое значение:
//  Строка - Получить дату RFC3339
Функция ПолучитьДатуRFC3339(Дата)

	Возврат Формат(УниверсальноеВремя(Дата), "ДФ=yyyy-MM-ddTHH:mm:ss.88") + СтрЗаменить(ПредставлениеЧасовогоПояса(
		ЧасовойПояс()), "GMT", "");

КонецФункции

// Функция преобразует значение в JSON
// 
// Параметры:
//  Значение - Структура
// 
// Возвращаемое значение:
//  Строка - Получить JSONИз значения
Функция ПолучитьJSONИзЗначения(Значение)

	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, Значение);

	JSON = ЗаписьJSON.Закрыть();

	JSON = СтрЗаменить(JSON, "###""", "");
	JSON = СтрЗаменить(JSON, """###", "");

	Возврат JSON;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли