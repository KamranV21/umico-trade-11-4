// @strict-types
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает сведения о счете Umico.
// 
// Параметры:
//  НомерСчета - Строка - номер счета карты лояльности
// 
// Возвращаемое значение:
//  см. UMC_ОбменСUmico.НоваяСтруктураСведенияОСчете.
Функция ПолучитьСведенияОСчете(НомерСчета) Экспорт

	Ресурс = "/customers/" + НомерСчета + "/balances";
	СтруктураОтвета = ВыполнитьHTTPЗапрос("balance", "GET", Ресурс);
	Возврат ОбработатьОтветПоСведениямОСчете(СтруктураОтвета);

КонецФункции

// Выполняет заполнение реквизитов, необходимых для подлкючения к Umico.
Процедура ОпределитьПараметрыПодключения() Экспорт

	Запрос = Новый Запрос("ВЫБРАТЬ
						  |	ПараметрыПодключения.APIKey,
						  |	ПараметрыПодключения.POSID
						  |ИЗ
						  |	Справочник.UMC_ПараметрыПодключенияКUmcio КАК ПараметрыПодключения
						  |ГДЕ
						  |	ВЫБОР
						  |		КОГДА &ВариантИспользования = ЗНАЧЕНИЕ(Перечисление.UMC_ВариантыИспользованияПодключенияКUmico.ДляОптовыхПродаж)
						  |			ТОГДА ПараметрыПодключения.Пользователь = &Пользователь
						  |		ИНАЧЕ ПараметрыПодключения.КассаККМ = &КассаККМ
						  |	КОНЕЦ
						  |	И ПараметрыПодключения.ВариантИспользования = &ВариантИспользования");
	Запрос.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("КассаККМ", КассаККМ);
	Запрос.УстановитьПараметр("ВариантИспользования", ВариантИспользования);

	Результат = Запрос.Выполнить();

	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ОбработкаHTTPЗапросов

// Выполняет передачу HTTP-запроса на сервер Umico.
// 
// Параметры:
//  Команда - Строка - Команда
//  Метод - Строка - Метод
//  Ресурс - Строка - Ресурс
//  ТелоЗапроса - Строка - Тело запроса
//  Документ - Неопределено - Документ
// 
// Возвращаемое значение:
// 	см. UMC_ОбменСUmico.НоваяСтруктураОтветHTTPЗапроса.
Функция ВыполнитьHTTPЗапрос(Команда, Метод, Ресурс, ТелоЗапроса = "", Документ = Неопределено)

	СтруктураОтвета = UMC_ОбменСUmico.НоваяСтруктураОтветHTTPЗапроса();

	HTTPСоединение = Новый HTTPСоединение("integration-api.umico.az", , , , , , Новый ЗащищенноеСоединениеOpenSSL);

	Заголовки = Новый Соответствие;
	Заголовки.Вставить("ApiKey", APIKey);
	Заголовки.Вставить("Content-Type", "application/json; charset=utf-8");

	HTTPЗапрос = Новый HTTPЗапрос("/api/v1" + Ресурс, Заголовки);
	HTTPЗапрос.УстановитьТелоИзСтроки(ТелоЗапроса);

	Попытка

		HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(Метод, HTTPЗапрос);
		ТелоОтвета = HTTPОтвет.ПолучитьТелоКакСтроку();
		СформироватьЗаписьЖурналаЗапросовUmico(Команда, Метод, Ресурс, ТелоЗапроса, Документ, ТелоОтвета);

		Если HTTPОтвет.КодСостояния >= 200 И HTTPОтвет.КодСостояния < 300 Тогда
			СтруктураОтвета.Результат = Истина;
			СтруктураОтвета.ТелоОтвета = ТелоОтвета;
		ИначеЕсли ТелоОтвета = "{""message"":""API rate limit exceeded""}" Тогда
			// Ошибка ожидания.
			СтруктураОтвета.Ожидание = Истина;
		Иначе
			ТекстСообщения = СтрШаблон(НСтр("ru = 'Ошибка при подключении к Umico. Код статуса: %1'"),
				HTTPОтвет.КодСостояния);
			СтруктураОтвета.ТекстОшибки = ТекстСообщения;
		КонецЕсли;

	Исключение
		СтруктураОтвета.ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;

	Возврат СтруктураОтвета;

КонецФункции

// Формирует запись логов в журнале.
// 
// Параметры:
//  Команда - Строка - Команда
//  Метод - Строка - Метод
//  Ресурс - Строка - Ресурс
//  ТелоЗапроса - Строка - Тело запроса
//  Документ - Неопределено - Документ
//  ТелоОтвета - Неопределено, Строка - Тело ответа
Процедура СформироватьЗаписьЖурналаЗапросовUmico(Команда, Метод, Ресурс, ТелоЗапроса, Документ, ТелоОтвета)

	ТекущийПользователь = Пользователи.ТекущийПользователь();

	ЗаписьЖурнала = Справочники.UMC_ЖурналЗапросовКUmcio.СоздатьЭлемент();
	ЗаписьЖурнала.Дата = ТекущаяДатаСеанса();
	ЗаписьЖурнала.Пользователь = ТекущийПользователь;
	ЗаписьЖурнала.Команда = Команда;
	ЗаписьЖурнала.Метод = Метод;
	ЗаписьЖурнала.Ресурс = Ресурс;
	ЗаписьЖурнала.Запрос = ТелоЗапроса;
	ЗаписьЖурнала.Ответ = ТелоОтвета;
	ЗаписьЖурнала.Документ = Документ;
	ЗаписьЖурнала.Записать();

КонецПроцедуры

// Обработать ответ по сведениям о счете.
// 
// Параметры:
//  СтруктураОтвета - Структура - Структура ответа:
// 	см. UMC_ОбменСUmico.НоваяСтруктураОтветHTTPЗапроса.
// 
// Возвращаемое значение:
//  см. UMC_ОбменСUmico.НоваяСтруктураСведенияОСчете.
Функция ОбработатьОтветПоСведениямОСчете(СтруктураОтвета)

	СведенияОСчете = UMC_ОбменСUmico.НоваяСтруктураСведенияОСчете();

	Если Не СтруктураОтвета.Результат Или Не ЗначениеЗаполнено(СтруктураОтвета.ТелоОтвета) Тогда
		СведенияОСчете.ТекстОшибки = СтруктураОтвета.ТекстОшибки;
		Возврат СведенияОСчете;
	КонецЕсли;

	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтруктураОтвета.ТелоОтвета);
	СтруктураJSON = ПрочитатьJSON(ЧтениеJSON); // См. UMC_ОбменСUmico.НоваяСтруктураJSONBalance

	СведенияОСчете.Результат = Истина;
	СведенияОСчете.Сумма = СтруктураJSON.available_points;

	Возврат СведенияОСчете;

КонецФункции

#КонецОбласти

#КонецОбласти

#КонецЕсли